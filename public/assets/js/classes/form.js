// Generated by CoffeeScript 1.6.3
(function() {
  var Form,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Form = (function() {
    function Form(container) {
      var label, labels, _i, _len;
      this.container = container;
      this.handleSubmissionResults = __bind(this.handleSubmissionResults, this);
      this.submitAjax = __bind(this.submitAjax, this);
      this.submit = __bind(this.submit, this);
      this.fields = [];
      labels = $('label', this.container);
      for (_i = 0, _len = labels.length; _i < _len; _i++) {
        label = labels[_i];
        this.createField(label);
      }
      if (this.submitBtn == null) {
        this.submitBtn = $('[type="submit"]', this.container);
      }
      if (this.container.data('ajax')) {
        if (this.container.data('ajax-url')) {
          this.ajax = this.container.data('ajax-url');
        }
      }
      if (this.ajax) {
        if (this.submitBtn) {
          this.submitBtn.click(this.submitAjax);
        } else {
          console.log('config field auto-saving for Field instances');
        }
      } else {
        this.submitBtn.click(this.submit);
      }
    }

    Form.prototype.createField = function(label) {
      return this.fields.push(new Field($(label)));
    };

    Form.prototype.isValid = function() {
      var field, _i, _len, _ref;
      this.valid = true;
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this.isValidField(field);
      }
      return this.valid;
    };

    Form.prototype.isValidField = function(field) {
      if (!field.isValid()) {
        return this.valid = false;
      }
    };

    Form.prototype.submit = function(e) {
      if (!this.isValid()) {
        e.preventDefault();
        return this.container.trigger('validation_error');
      }
    };

    Form.prototype.submitAjax = function(e) {
      var field, _i, _len, _ref;
      e.preventDefault();
      if (this.isValid()) {
        this.data = {};
        _ref = this.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          this.summarizeField(field);
        }
        return $.post(this.ajax, this.data, this.handleSubmissionResults, "json");
      } else {
        return this.container.trigger(cs.events.VALIDATION_ERROR);
      }
    };

    Form.prototype.summarizeField = function(field) {
      return this.data[field.getName()] = field.getValue();
    };

    Form.prototype.handleSubmissionResults = function(results) {
      if (results.err) {
        console.log(results.err);
        this.container.trigger(cs.events.FORM_FAILURE);
      }
      if (results.success) {
        return this.container.trigger(cs.events.FORM_SUCCESS);
      }
    };

    return Form;

  })();

}).call(this);
