// Generated by CoffeeScript 1.6.3
(function() {
  var Field,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Field = (function() {
    function Field(container) {
      this.container = container;
      this.checkValue = __bind(this.checkValue, this);
      if (!this.container.hasClass('disabled')) {
        if (this.container.find('input').length) {
          this.field = this.container.find('input');
          if (this.field.attr('type') === "text") {
            this.updateEvent = 'blur';
          } else {
            this.updateEvent = 'change';
          }
        } else if (this.container.find('select').length) {
          this.field = this.container.find('select');
          this.updateEvent = 'change';
        }
        this.validation = this.field.data('validation') || false;
        this.field.bind(this.updateEvent, this.checkValue);
      } else {
        if (this.container.find('input').length) {
          this.field = this.container.find('input');
        }
        if (this.container.find('select').length) {
          this.field = this.container.find('select');
        }
        this.validation = false;
      }
    }

    Field.prototype.checkValue = function(event) {
      return this.isValid();
    };

    Field.prototype.isValid = function() {
      if (!this.validation) {
        this.valid = true;
      } else {
        this.valid = cs.validator.test(this.validation, this.field);
      }
      if (this.valid) {
        this.container.removeClass().addClass('has-success');
      } else {
        this.container.removeClass().addClass('has-error');
      }
      return this.valid;
    };

    Field.prototype.getName = function() {
      return this.field.attr('name');
    };

    Field.prototype.getValue = function() {
      return this.field.val();
    };

    return Field;

  })();

}).call(this);
