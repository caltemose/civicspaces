// Generated by CoffeeScript 1.6.3
(function() {
  if (this.cs == null) {
    this.cs = {};
  }

  this.cs.map = {
    defaultLat: 33.7811643,
    defaultLng: -84.38362970000003,
    markers: [],
    init: function(container, lat, lng, marker, zoom) {
      var options;
      if (marker == null) {
        marker = null;
      }
      if (zoom == null) {
        zoom = 12;
      }
      this.container = $(container);
      options = {
        center: cs.map.makeLatLng(lat, lng),
        zoom: zoom
      };
      this.googlemap = new google.maps.Map(this.container[0], options);
      if (marker) {
        return cs.map.addMarker(lat, lng, marker.label, marker.infoHtml);
      }
    },
    setBoundsUpdate: function(callback) {
      return google.maps.event.addListener(this.googlemap, 'bounds_changed', callback);
    },
    drawMap: function(lat, lng, marker) {
      var m, _i, _len, _ref;
      if (marker == null) {
        marker = null;
      }
      if (cs.map.markers.length) {
        _ref = cs.map.markers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          cs.map.removeMarker(m);
        }
        cs.map.markers.length = 0;
      }
      cs.map.googlemap.setCenter(cs.map.makeLatLng(lat, lng));
      cs.map.googlemap.setZoom(15);
      if (marker) {
        return cs.map.addMarker(lat, lng, marker.label, marker.infoHtml);
      }
    },
    getLocalityFromComponents: function(components) {
      var component, locality, _i, _len;
      for (_i = 0, _len = components.length; _i < _len; _i++) {
        component = components[_i];
        if (component.types[0] === 'locality') {
          locality = cs.map.getLocality(component);
        }
      }
      return locality;
    },
    getLocality: function(component) {
      return component.long_name;
    },
    getGeo: function(address, callback) {
      var geocoder;
      geocoder = cs.map.geocoder || new google.maps.Geocoder();
      return geocoder.geocode({
        address: address
      }, function(results, status) {
        var data, loc;
        if (status === google.maps.GeocoderStatus.OK) {
          loc = results[0].geometry.location;
          data = {
            lat: loc.k,
            lng: loc.A,
            locality: cs.map.getLocalityFromComponents(results[0].address_components)
          };
          if (results[0].partial_match) {
            data.partial_match = true;
          }
          return callback(null, data);
        } else {
          return callback(status, null);
        }
      });
    },
    makeLatLng: function(lat, lng) {
      return new google.maps.LatLng(lat, lng);
    },
    makeMarkerOptions: function(lat, lng, label) {
      var options;
      return options = {
        position: this.makeLatLng(lat, lng),
        map: this.googlemap,
        title: label
      };
    },
    initInfoWindow: function() {
      if (!cs.map.infoWindow) {
        return cs.map.infoWindow = new google.maps.InfoWindow({
          content: 'default'
        });
      }
    },
    addMarker: function(lat, lng, label, infoHtml) {
      var marker, options;
      if (label == null) {
        label = 'unlabeled marker';
      }
      cs.map.initInfoWindow();
      options = this.makeMarkerOptions(lat, lng, label);
      marker = new google.maps.Marker(options);
      cs.map.markers.push(marker);
      return google.maps.event.addListener(marker, 'click', function() {
        cs.map.infoWindow.setContent(infoHtml);
        return cs.map.infoWindow.open(cs.map.googlemap, marker);
      });
    },
    addSpaceMarker: function(space) {
      var info, marker, options;
      cs.map.initInfoWindow();
      info = '<div class="mapInfoWindow">';
      info += '<p><a href="/space/view/' + space._id + '">';
      info += space.address + '</a><br>' + space.city + ', ' + space.zip + '</p>';
      options = cs.map.makeMarkerOptions(space.geo.lat, space.geo.lng, space.address);
      marker = new google.maps.Marker(options);
      cs.map.markers.push(marker);
      return google.maps.event.addListener(marker, 'click', function() {
        cs.map.infoWindow.setContent(info);
        return cs.map.infoWindow.open(cs.map.googlemap, marker);
      });
    },
    removeMarker: function(marker) {
      marker.setMap(null);
      return marker = null;
    },
    getBounds: function() {
      return this.googlemap.getBounds();
    }
  };

}).call(this);
