// Generated by CoffeeScript 1.6.3
(function() {
  var Field, Form, Validator,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (this.cs == null) {
    this.cs = {};
  }

  this.cs.sharedMethods = {
    initForm: function(formId) {
      var form;
      return form = new Form($(formId));
    }
  };

  Validator = (function() {
    function Validator() {
      if (!!this.singleton_instance) {
        return this.singleton_instance;
      }
      this.singleton_instance = this;
    }

    Validator.prototype.test = function(method, input) {
      if (this[method]) {
        return this[method](input);
      } else {
        return this.not_empty(input);
      }
    };

    Validator.prototype.null_selection = "-1";

    Validator.prototype.not_empty = function(input) {
      return input.val().length > 0;
    };

    Validator.prototype.email = function(input) {
      var val;
      val = input.val();
      return val.match(this.patterns.email) && val.length <= 128;
    };

    Validator.prototype.password = function(input) {
      var val;
      val = input.val();
      return val.length >= 4;
    };

    Validator.prototype.patterns = {
      email: /^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w0-9a-zA-Z]*\.)+[a-zA-Z]{2,9})$/i
    };

    return Validator;

  })();

  this.cs.validator = new Validator();

  Form = (function() {
    function Form(container) {
      var label, labels, _i, _len;
      this.container = container;
      this.submit = __bind(this.submit, this);
      this.fields = [];
      labels = $('label', this.container);
      for (_i = 0, _len = labels.length; _i < _len; _i++) {
        label = labels[_i];
        this.createField(label);
      }
      if (this.submitBtn == null) {
        this.submitBtn = $('[type="submit"]', this.container);
      }
      if (this.submitBtn) {
        this.submitBtn.click(this.submit);
      }
    }

    Form.prototype.createField = function(label) {
      return this.fields.push(new Field($(label)));
    };

    Form.prototype.isValid = function() {
      var field, _i, _len, _ref;
      this.valid = true;
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this.isValidField(field);
      }
      return this.valid;
    };

    Form.prototype.isValidField = function(field) {
      if (!field.isValid()) {
        return this.valid = false;
      }
    };

    Form.prototype.submit = function(e) {
      if (!this.isValid()) {
        e.preventDefault();
        return this.container.trigger('validation_error');
      }
    };

    return Form;

  })();

  Field = (function() {
    function Field(container) {
      this.container = container;
      this.checkValue = __bind(this.checkValue, this);
      if (this.container.find('input').length) {
        this.field = this.container.find('input');
        if (this.field.attr('type') === "text") {
          this.updateEvent = 'blur';
        } else {
          this.updateEvent = 'change';
        }
      } else if (this.container.find('select').length) {
        this.field = this.container.find('select');
        this.updateEvent = 'change';
      }
      this.validation = this.field.data('validation-rules') || false;
      this.field.bind(this.updateEvent, this.checkValue);
    }

    Field.prototype.checkValue = function(event) {
      return this.isValid();
    };

    Field.prototype.isValid = function() {
      if (!this.validation) {
        this.valid = true;
      } else {
        this.valid = cs.validator.test(this.validation, this.field);
      }
      if (this.valid) {
        this.container.removeClass().addClass('has-success');
      } else {
        this.container.removeClass().addClass('has-error');
      }
      return this.valid;
    };

    return Field;

  })();

}).call(this);
